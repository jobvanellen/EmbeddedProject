
EmbeddedProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000856  000008ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  00800074  00800074  000008fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e16  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000574  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000504  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  0000234c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ae  00000000  00000000  00002c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000032f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_1>
   8:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_2>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_10>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	eb 01       	movw	r28, r22
  56:	05 02       	muls	r16, r21
  58:	05 02       	muls	r16, r21
  5a:	f1 01       	movw	r30, r2
  5c:	05 02       	muls	r16, r21
  5e:	05 02       	muls	r16, r21
  60:	05 02       	muls	r16, r21
  62:	05 02       	muls	r16, r21
  64:	fd 01       	movw	r30, r26
  66:	05 02       	muls	r16, r21
  68:	f4 01       	movw	r30, r8
  6a:	05 02       	muls	r16, r21
  6c:	f7 01       	movw	r30, r14
  6e:	05 02       	muls	r16, r21
  70:	fa 01       	movw	r30, r20
  72:	05 02       	muls	r16, r21
  74:	05 02       	muls	r16, r21
  76:	05 02       	muls	r16, r21
  78:	ee 01       	movw	r28, r28
  7a:	05 02       	muls	r16, r21
  7c:	05 02       	muls	r16, r21
  7e:	05 02       	muls	r16, r21
  80:	e8 01       	movw	r28, r16

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e6 e5       	ldi	r30, 0x56	; 86
  96:	f8 e0       	ldi	r31, 0x08	; 8
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a4 37       	cpi	r26, 0x74	; 116
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	a4 e7       	ldi	r26, 0x74	; 116
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a6 3c       	cpi	r26, 0xC6	; 198
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
  b8:	0c 94 29 04 	jmp	0x852	; 0x852 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <init_i2c_slave>:
void (*ontfunc) (uint8_t[],uint8_t);
uint8_t (*verfunc) ();

void init_i2c_slave(uint8_t ad) {
	
		TWSR = 0;
  c0:	11 b8       	out	0x01, r1	; 1
		TWBR = ((F_CPU / SCL_frequentie) - 16) / 2;
  c2:	90 e2       	ldi	r25, 0x20	; 32
  c4:	90 b9       	out	0x00, r25	; 0
		TWCR = (1 << TWIE) | (1 << TWEN) | (1 << TWEA);
  c6:	95 e4       	ldi	r25, 0x45	; 69
  c8:	96 bf       	out	0x36, r25	; 54
		TWAR = ad<<1;
  ca:	88 0f       	add	r24, r24
  cc:	82 b9       	out	0x02, r24	; 2
  ce:	08 95       	ret

000000d0 <slaaftwi>:
}

void slaaftwi() {	
		static uint8_t data[40];
		static uint8_t teller=0;
	switch(TWSR) {
  d0:	81 b1       	in	r24, 0x01	; 1
  d2:	80 3a       	cpi	r24, 0xA0	; 160
  d4:	d1 f0       	breq	.+52     	; 0x10a <slaaftwi+0x3a>
  d6:	28 f4       	brcc	.+10     	; 0xe2 <slaaftwi+0x12>
  d8:	80 36       	cpi	r24, 0x60	; 96
  da:	41 f0       	breq	.+16     	; 0xec <slaaftwi+0x1c>
  dc:	80 38       	cpi	r24, 0x80	; 128
  de:	49 f0       	breq	.+18     	; 0xf2 <slaaftwi+0x22>
  e0:	35 c0       	rjmp	.+106    	; 0x14c <slaaftwi+0x7c>
  e2:	88 3a       	cpi	r24, 0xA8	; 168
  e4:	21 f1       	breq	.+72     	; 0x12e <slaaftwi+0x5e>
  e6:	88 3b       	cpi	r24, 0xB8	; 184
  e8:	59 f1       	breq	.+86     	; 0x140 <slaaftwi+0x70>
  ea:	30 c0       	rjmp	.+96     	; 0x14c <slaaftwi+0x7c>
		case 0x08:	
			break;
		
		case 0x60:

		  teller=0;
  ec:	10 92 9c 00 	sts	0x009C, r1

		  break;
  f0:	2d c0       	rjmp	.+90     	; 0x14c <slaaftwi+0x7c>
		case 0x68:

		  break;
		case 0x80:
		  data[teller++] = TWDR;
  f2:	e0 91 9c 00 	lds	r30, 0x009C
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	8e 0f       	add	r24, r30
  fa:	80 93 9c 00 	sts	0x009C, r24
  fe:	83 b1       	in	r24, 0x03	; 3
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 58       	subi	r30, 0x8C	; 140
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	80 83       	st	Z, r24

		  break;
 108:	21 c0       	rjmp	.+66     	; 0x14c <slaaftwi+0x7c>
		case 0xA0:
		  ontfunc(data,teller);
 10a:	e0 91 b0 00 	lds	r30, 0x00B0
 10e:	f0 91 b1 00 	lds	r31, 0x00B1
 112:	60 91 9c 00 	lds	r22, 0x009C
 116:	84 e7       	ldi	r24, 0x74	; 116
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	09 95       	icall
 11c:	e4 e7       	ldi	r30, 0x74	; 116
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	88 e8       	ldi	r24, 0x88	; 136
 122:	90 e0       	ldi	r25, 0x00	; 0
		  resetData();
 124:	11 92       	st	Z+, r1
 126:	e8 17       	cp	r30, r24
 128:	f9 07       	cpc	r31, r25
 12a:	e1 f7       	brne	.-8      	; 0x124 <slaaftwi+0x54>
 12c:	0f c0       	rjmp	.+30     	; 0x14c <slaaftwi+0x7c>
		  break;
		case 0xA8:
		  teller=0;
 12e:	10 92 9c 00 	sts	0x009C, r1
		  TWDR=verfunc();
 132:	e0 91 ae 00 	lds	r30, 0x00AE
 136:	f0 91 af 00 	lds	r31, 0x00AF
 13a:	09 95       	icall
 13c:	83 b9       	out	0x03, r24	; 3
		  break;
 13e:	06 c0       	rjmp	.+12     	; 0x14c <slaaftwi+0x7c>
		case 0xB8: 
    	  TWDR=verfunc();
 140:	e0 91 ae 00 	lds	r30, 0x00AE
 144:	f0 91 af 00 	lds	r31, 0x00AF
 148:	09 95       	icall
 14a:	83 b9       	out	0x03, r24	; 3
		case 0xC0:   //NACK
		   break;
		case 0xC8:
		break;		   	
	}	
	 TWCR |= (1<<TWINT);    // Clear TWINT Flag	 
 14c:	86 b7       	in	r24, 0x36	; 54
 14e:	80 68       	ori	r24, 0x80	; 128
 150:	86 bf       	out	0x36, r24	; 54
 152:	08 95       	ret

00000154 <init_i2c_ontvang>:
	  writeString("usart werkt nog\n\r");
}


void init_i2c_ontvang( void (*ontvanger) (uint8_t [],uint8_t)) {
	ontfunc=ontvanger;
 154:	90 93 b1 00 	sts	0x00B1, r25
 158:	80 93 b0 00 	sts	0x00B0, r24
 15c:	08 95       	ret

0000015e <init_i2c_verzend>:
}

void init_i2c_verzend( uint8_t (*verzender) ()) {
	verfunc=verzender;
 15e:	90 93 af 00 	sts	0x00AF, r25
 162:	80 93 ae 00 	sts	0x00AE, r24
 166:	08 95       	ret

00000168 <writeChar>:
}

void writeChar(char ch)
{
	while (!(UCSRA & (1<<UDRE)));
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <writeChar>
	UDR = (uint8_t)ch;
 16c:	8c b9       	out	0x0c, r24	; 12
 16e:	08 95       	ret

00000170 <writeString>:

}

void writeString(char *string)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	while(*string)
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	31 f0       	breq	.+12     	; 0x188 <writeString+0x18>
 17c:	21 96       	adiw	r28, 0x01	; 1
	writeChar(*string++);
 17e:	0e 94 b4 00 	call	0x168	; 0x168 <writeChar>

}

void writeString(char *string)
{
	while(*string)
 182:	89 91       	ld	r24, Y+
 184:	81 11       	cpse	r24, r1
 186:	fb cf       	rjmp	.-10     	; 0x17e <writeString+0xe>
	writeChar(*string++);
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <initUSART>:
	 TWCR |= (1<<TWINT);    // Clear TWINT Flag	 
}

void initUSART() {

	  UBRRH = UBRR_BAUD >> 8;
 18e:	10 bc       	out	0x20, r1	; 32
	  UBRRL = (uint8_t) UBRR_BAUD;
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	89 b9       	out	0x09, r24	; 9
	  UCSRA = 0x00;
 194:	1b b8       	out	0x0b, r1	; 11
	  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 196:	86 e8       	ldi	r24, 0x86	; 134
 198:	80 bd       	out	0x20, r24	; 32
	  UCSRB = (1 << TXEN) | (1 << RXEN);
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	8a b9       	out	0x0a, r24	; 10
	  writeString("usart werkt nog\n\r");
 19e:	81 e6       	ldi	r24, 0x61	; 97
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <writeString>
 1a6:	08 95       	ret

000001a8 <ontvangData>:

 /*slave heeft data ontvangen van de master
 data[]	-	 een array waarin de ontvangen data staat
 tel	-	 het aantal bytes dat ontvangen is*/ 
void ontvangData(uint8_t data[],uint8_t tel){
	for(int i=0;i<tel;++i)
 1a8:	66 23       	and	r22, r22
 1aa:	59 f0       	breq	.+22     	; 0x1c2 <ontvangData+0x1a>
 1ac:	fc 01       	movw	r30, r24
 1ae:	a2 eb       	ldi	r26, 0xB2	; 178
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	9c 01       	movw	r18, r24
 1b4:	26 0f       	add	r18, r22
 1b6:	31 1d       	adc	r19, r1
	    data_ont[i]=data[i];
 1b8:	91 91       	ld	r25, Z+
 1ba:	9d 93       	st	X+, r25

 /*slave heeft data ontvangen van de master
 data[]	-	 een array waarin de ontvangen data staat
 tel	-	 het aantal bytes dat ontvangen is*/ 
void ontvangData(uint8_t data[],uint8_t tel){
	for(int i=0;i<tel;++i)
 1bc:	e2 17       	cp	r30, r18
 1be:	f3 07       	cpc	r31, r19
 1c0:	d9 f7       	brne	.-10     	; 0x1b8 <ontvangData+0x10>
	    data_ont[i]=data[i];
	data_flag = TRUE;
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	80 93 9d 00 	sts	0x009D, r24
 1c8:	08 95       	ret

000001ca <verzendByte>:

/* het byte dat de slave verzend naar de master
in dit voorbeeld een eenvoudige t eller
*/
uint8_t verzendByte() {
	uint8_t temp = motorDistanceTotalCM;
 1ca:	80 91 a0 00 	lds	r24, 0x00A0
	motorDistanceTotalCM = 0;
 1ce:	10 92 a0 00 	sts	0x00A0, r1
	return temp; //databyte++;
}
 1d2:	08 95       	ret

000001d4 <setMotorPower>:
	if(getBumperRight() || getBumperLeft()){
	 stopDriving();
	}
}

void setMotorPower(uint8_t right, uint8_t left){
 1d4:	83 3d       	cpi	r24, 0xD3	; 211
 1d6:	08 f0       	brcs	.+2      	; 0x1da <setMotorPower+0x6>
 1d8:	82 ed       	ldi	r24, 0xD2	; 210
 1da:	63 3d       	cpi	r22, 0xD3	; 211
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <setMotorPower+0xc>
 1de:	62 ed       	ldi	r22, 0xD2	; 210
	if(right > 210) right = 210;
	if(left > 210) left = 210;
	OCR1AL = right;
 1e0:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = left;
 1e2:	68 bd       	out	0x28, r22	; 40
 1e4:	08 95       	ret

000001e6 <setMotorPowerDynamic>:
	desiredSpeed_left = 1200;
	else
	desiredSpeed_left = speedLeft;
}

void setMotorPowerDynamic(uint8_t right_des, uint8_t left_des){
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
	while(right_des != curPower_right && left_des != curPower_left){
 1ea:	90 91 ac 00 	lds	r25, 0x00AC
 1ee:	89 17       	cp	r24, r25
 1f0:	91 f1       	breq	.+100    	; 0x256 <setMotorPowerDynamic+0x70>
 1f2:	d6 2f       	mov	r29, r22
 1f4:	c8 2f       	mov	r28, r24
 1f6:	20 91 ad 00 	lds	r18, 0x00AD
 1fa:	62 17       	cp	r22, r18
 1fc:	61 f1       	breq	.+88     	; 0x256 <setMotorPowerDynamic+0x70>
		if(right_des < curPower_right) curPower_right--;
 1fe:	c9 17       	cp	r28, r25
 200:	18 f4       	brcc	.+6      	; 0x208 <setMotorPowerDynamic+0x22>
 202:	91 50       	subi	r25, 0x01	; 1
 204:	90 93 ac 00 	sts	0x00AC, r25
		if(right_des > curPower_right) curPower_right++;
 208:	90 91 ac 00 	lds	r25, 0x00AC
 20c:	9c 17       	cp	r25, r28
 20e:	18 f4       	brcc	.+6      	; 0x216 <setMotorPowerDynamic+0x30>
 210:	9f 5f       	subi	r25, 0xFF	; 255
 212:	90 93 ac 00 	sts	0x00AC, r25
		if(left_des < curPower_left) curPower_left--;
 216:	d2 17       	cp	r29, r18
 218:	18 f4       	brcc	.+6      	; 0x220 <setMotorPowerDynamic+0x3a>
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	20 93 ad 00 	sts	0x00AD, r18
		if(left_des > curPower_left) curPower_left++;
 220:	90 91 ad 00 	lds	r25, 0x00AD
 224:	9d 17       	cp	r25, r29
 226:	18 f4       	brcc	.+6      	; 0x22e <setMotorPowerDynamic+0x48>
 228:	9f 5f       	subi	r25, 0xFF	; 255
 22a:	90 93 ad 00 	sts	0x00AD, r25
		setMotorPower(curPower_right, curPower_left);
 22e:	60 91 ad 00 	lds	r22, 0x00AD
 232:	80 91 ac 00 	lds	r24, 0x00AC
 236:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setMotorPower>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e9       	ldi	r24, 0x9F	; 159
 23c:	9f e0       	ldi	r25, 0x0F	; 15
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <setMotorPowerDynamic+0x58>
 242:	00 c0       	rjmp	.+0      	; 0x244 <setMotorPowerDynamic+0x5e>
 244:	00 00       	nop
	else
	desiredSpeed_left = speedLeft;
}

void setMotorPowerDynamic(uint8_t right_des, uint8_t left_des){
	while(right_des != curPower_right && left_des != curPower_left){
 246:	90 91 ac 00 	lds	r25, 0x00AC
 24a:	c9 17       	cp	r28, r25
 24c:	21 f0       	breq	.+8      	; 0x256 <setMotorPowerDynamic+0x70>
 24e:	20 91 ad 00 	lds	r18, 0x00AD
 252:	d2 13       	cpse	r29, r18
 254:	d4 cf       	rjmp	.-88     	; 0x1fe <setMotorPowerDynamic+0x18>
		if(left_des < curPower_left) curPower_left--;
		if(left_des > curPower_left) curPower_left++;
		setMotorPower(curPower_right, curPower_left);
		_delay_ms(2);
	}
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <incrementSpeed>:

void incrementSpeed(){
	snelheid += 25;
 25c:	80 91 60 00 	lds	r24, 0x0060
 260:	87 5e       	subi	r24, 0xE7	; 231
 262:	80 93 60 00 	sts	0x0060, r24
 266:	08 95       	ret

00000268 <decrementSpeed>:
}

void decrementSpeed(){
	snelheid -= 25;
 268:	80 91 60 00 	lds	r24, 0x0060
 26c:	89 51       	subi	r24, 0x19	; 25
 26e:	80 93 60 00 	sts	0x0060, r24
 272:	08 95       	ret

00000274 <setMotorDirection>:
}

//sets the direction of the left and right motor respectively, only call when speed = 0
void setMotorDirection(uint8_t left, uint8_t right){
	if(left)
 274:	88 23       	and	r24, r24
 276:	11 f0       	breq	.+4      	; 0x27c <setMotorDirection+0x8>
		PORTC |= DIR_L;
 278:	aa 9a       	sbi	0x15, 2	; 21
 27a:	01 c0       	rjmp	.+2      	; 0x27e <setMotorDirection+0xa>
	else
		PORTC &= ~DIR_L;
 27c:	aa 98       	cbi	0x15, 2	; 21
		
	if(right)
 27e:	66 23       	and	r22, r22
 280:	11 f0       	breq	.+4      	; 0x286 <setMotorDirection+0x12>
		PORTC |= DIR_R;
 282:	ab 9a       	sbi	0x15, 3	; 21
 284:	01 c0       	rjmp	.+2      	; 0x288 <setMotorDirection+0x14>
	else
		PORTC &= ~DIR_R;
 286:	ab 98       	cbi	0x15, 3	; 21
		
	curDirection_right = right;
 288:	60 93 a7 00 	sts	0x00A7, r22
	curDirection_left = left;
 28c:	80 93 a8 00 	sts	0x00A8, r24
 290:	08 95       	ret

00000292 <init>:
	for(int i = 0; i < 4; i++)
		_delay_ms(250);
}

void init(){
	cli();
 292:	f8 94       	cli
	
	//set pins I/O
	//DDRA = 0x00; //00000000
	//DDRB =  //11011011
	DDRC= 0xFF; //111111xx
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	84 bb       	out	0x14, r24	; 20
	DDRD = MOTOR_R | MOTOR_L; //01110010
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	81 bb       	out	0x11, r24	; 17
	
	//initialize PWM (timer1)
	TCCR1A = (0 << WGM10) | (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
 29c:	82 ea       	ldi	r24, 0xA2	; 162
 29e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =  (1 << WGM13) | (0 << WGM12) | (1 << CS10);
 2a0:	81 e1       	ldi	r24, 0x11	; 17
 2a2:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 210; 
 2a4:	82 ed       	ldi	r24, 0xD2	; 210
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	97 bd       	out	0x27, r25	; 39
 2aa:	86 bd       	out	0x26, r24	; 38
	OCR1AL = 0;
 2ac:	1a bc       	out	0x2a, r1	; 42
	OCR1BL = 0;
 2ae:	18 bc       	out	0x28, r1	; 40
	setMotorDirection(FWD, FWD);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 3a 01 	call	0x274	; 0x274 <setMotorDirection>
	
	//initialize interrupts: int0 links, int1 rechts
	MCUCR = (0 << ISC11) | (1 << ISC10) | (0 << ISC01) | (1 << ISC00);
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	85 bf       	out	0x35, r24	; 53
	GICR = (1 << INT2) | (1 << INT1);
 2bc:	80 ea       	ldi	r24, 0xA0	; 160
 2be:	8b bf       	out	0x3b, r24	; 59

	//initialiseer Timer 0: 100µs cycle
	TCCR0 =   (0 << WGM00) | (1 << WGM01)				//Counter mode:CTC Top:OCR0 Update:Immediate TOV0flag set on:MAX
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	83 bf       	out	0x33, r24	; 51
			| (0 << COM00) | (0 << COM01)				//normal port OC0 disconnected
			| (0 << CS02)  | (1 << CS01) | (0 << CS00); //8bit prescaler
	OCR0  = 99;											//output compare register
 2c4:	83 e6       	ldi	r24, 0x63	; 99
 2c6:	8c bf       	out	0x3c, r24	; 60
	TIMSK = (1 << OCIE0);
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	89 bf       	out	0x39, r24	; 57
	
	//////////////////////////////////////
	/*			i2c init functies		*/
	//////////////////////////////////////
	initUSART();
 2cc:	0e 94 c7 00 	call	0x18e	; 0x18e <initUSART>
	init_i2c_slave(0x20);	
 2d0:	80 e2       	ldi	r24, 0x20	; 32
 2d2:	0e 94 60 00 	call	0xc0	; 0xc0 <init_i2c_slave>
	/*ontvangData is de functie die uitgevoerd wordt 
	wanneer een byte via de i2c bus ontvangen wordt
	*/
	init_i2c_ontvang(ontvangData); 
 2d6:	84 ed       	ldi	r24, 0xD4	; 212
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 aa 00 	call	0x154	; 0x154 <init_i2c_ontvang>
	
	/*verzendByte is de functie die aangeroepen wordt
	wanneer de slave een byte naar de master verzend*/
	init_i2c_verzend(verzendByte);
 2de:	85 ee       	ldi	r24, 0xE5	; 229
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 af 00 	call	0x15e	; 0x15e <init_i2c_verzend>
		
	sei();
 2e6:	78 94       	sei
 2e8:	08 95       	ret

000002ea <rijVooruit>:
	curDirection_right = right;
	curDirection_left = left;
}

void rijVooruit(){
	if(!(curDirection_left == FWD && curDirection_right == FWD)){//zet snelheid naar 0 en verander de richting als dat nodig is
 2ea:	80 91 a8 00 	lds	r24, 0x00A8
 2ee:	81 11       	cpse	r24, r1
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <rijVooruit+0x10>
 2f2:	80 91 a7 00 	lds	r24, 0x00A7
 2f6:	88 23       	and	r24, r24
 2f8:	41 f0       	breq	.+16     	; 0x30a <rijVooruit+0x20>
		setMotorPowerDynamic(0, 0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
		setMotorDirection(FWD,FWD);		
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 3a 01 	call	0x274	; 0x274 <setMotorDirection>
	}
	setMotorPowerDynamic(snelheid, snelheid);
 30a:	80 91 60 00 	lds	r24, 0x0060
 30e:	68 2f       	mov	r22, r24
 310:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
 314:	08 95       	ret

00000316 <rijAchteruit>:
}

void rijAchteruit(){
	if(!(curDirection_left == BWD && curDirection_right == BWD)){//zet snelheid naar 0 en verander de richting als dat nodig is
 316:	80 91 a8 00 	lds	r24, 0x00A8
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	21 f4       	brne	.+8      	; 0x326 <rijAchteruit+0x10>
 31e:	80 91 a7 00 	lds	r24, 0x00A7
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	41 f0       	breq	.+16     	; 0x336 <rijAchteruit+0x20>
		setMotorPowerDynamic(0, 0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
		setMotorDirection(BWD,BWD);		
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	0e 94 3a 01 	call	0x274	; 0x274 <setMotorDirection>
	}
	setMotorPowerDynamic(snelheid, snelheid);
 336:	80 91 60 00 	lds	r24, 0x0060
 33a:	68 2f       	mov	r22, r24
 33c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
 340:	08 95       	ret

00000342 <naarLinks>:
}

void naarLinks(){
	if(!(curDirection_left == BWD && curDirection_right == FWD)){//zet snelheid naar 0 en verander de richting als dat nodig is
 342:	80 91 a8 00 	lds	r24, 0x00A8
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	21 f4       	brne	.+8      	; 0x352 <naarLinks+0x10>
 34a:	80 91 a7 00 	lds	r24, 0x00A7
 34e:	88 23       	and	r24, r24
 350:	41 f0       	breq	.+16     	; 0x362 <naarLinks+0x20>
		setMotorPowerDynamic(0, 0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
		setMotorDirection(BWD,FWD);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 3a 01 	call	0x274	; 0x274 <setMotorDirection>
	}
	setMotorPowerDynamic(snelheid, snelheid);
 362:	80 91 60 00 	lds	r24, 0x0060
 366:	68 2f       	mov	r22, r24
 368:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
 36c:	08 95       	ret

0000036e <naarRechts>:
	//TODO gebruik kompas
}

void naarRechts(){
	if(!(curDirection_left == FWD && curDirection_right == BWD)){//zet snelheid naar 0 en verander de richting als dat nodig is
 36e:	80 91 a8 00 	lds	r24, 0x00A8
 372:	81 11       	cpse	r24, r1
 374:	04 c0       	rjmp	.+8      	; 0x37e <naarRechts+0x10>
 376:	80 91 a7 00 	lds	r24, 0x00A7
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	41 f0       	breq	.+16     	; 0x38e <naarRechts+0x20>
		setMotorPowerDynamic(0, 0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
		setMotorDirection(FWD,BWD);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 3a 01 	call	0x274	; 0x274 <setMotorDirection>
	}
	setMotorPowerDynamic(snelheid, snelheid);
 38e:	80 91 60 00 	lds	r24, 0x0060
 392:	68 2f       	mov	r22, r24
 394:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setMotorPowerDynamic>
 398:	08 95       	ret

0000039a <stopDriving>:
	//TODO gebruik kompas
}

void stopDriving(){
	setMotorPower(0,0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setMotorPower>
	curPower_left = 0;
 3a2:	10 92 ad 00 	sts	0x00AD, r1
	curPower_right = 0;
 3a6:	10 92 ac 00 	sts	0x00AC, r1
 3aa:	08 95       	ret

000003ac <i2c>:
    }
	return(0);
}

void i2c(){
	if(data_flag) {
 3ac:	80 91 9d 00 	lds	r24, 0x009D
 3b0:	88 23       	and	r24, r24
 3b2:	c9 f1       	breq	.+114    	; 0x426 <i2c+0x7a>
		switch(data_ont[0]) {
 3b4:	20 91 b2 00 	lds	r18, 0x00B2
 3b8:	82 2f       	mov	r24, r18
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	e1 56       	subi	r30, 0x61	; 97
 3c0:	f1 09       	sbc	r31, r1
 3c2:	e7 31       	cpi	r30, 0x17	; 23
 3c4:	f1 05       	cpc	r31, r1
 3c6:	08 f5       	brcc	.+66     	; 0x40a <i2c+0x5e>
 3c8:	e6 5d       	subi	r30, 0xD6	; 214
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	0c 94 23 04 	jmp	0x846	; 0x846 <__tablejump2__>
			case 'w': rijVooruit();
 3d0:	0e 94 75 01 	call	0x2ea	; 0x2ea <rijVooruit>
				break;
 3d4:	22 c0       	rjmp	.+68     	; 0x41a <i2c+0x6e>
			case 'a': naarLinks();
 3d6:	0e 94 a1 01 	call	0x342	; 0x342 <naarLinks>
				break;
 3da:	1f c0       	rjmp	.+62     	; 0x41a <i2c+0x6e>
			case 's': rijAchteruit();
 3dc:	0e 94 8b 01 	call	0x316	; 0x316 <rijAchteruit>
				break;
 3e0:	1c c0       	rjmp	.+56     	; 0x41a <i2c+0x6e>
			case 'd': naarRechts();
 3e2:	0e 94 b7 01 	call	0x36e	; 0x36e <naarRechts>
				break;
 3e6:	19 c0       	rjmp	.+50     	; 0x41a <i2c+0x6e>
			case 'k': incrementSpeed();
 3e8:	0e 94 2e 01 	call	0x25c	; 0x25c <incrementSpeed>
				break;
 3ec:	16 c0       	rjmp	.+44     	; 0x41a <i2c+0x6e>
			case 'm': decrementSpeed();
 3ee:	0e 94 34 01 	call	0x268	; 0x268 <decrementSpeed>
				break;
 3f2:	13 c0       	rjmp	.+38     	; 0x41a <i2c+0x6e>
			case 'o': stopDriving();
 3f4:	0e 94 cd 01 	call	0x39a	; 0x39a <stopDriving>
				break;
 3f8:	10 c0       	rjmp	.+32     	; 0x41a <i2c+0x6e>
			case 'i': compass = data_ont[1];
 3fa:	80 91 b3 00 	lds	r24, 0x00B3
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 9f 00 	sts	0x009F, r25
 404:	80 93 9e 00 	sts	0x009E, r24
				break;
 408:	08 c0       	rjmp	.+16     	; 0x41a <i2c+0x6e>
			default: compass = data_ont[0] *2;
 40a:	82 2f       	mov	r24, r18
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	90 93 9f 00 	sts	0x009F, r25
 416:	80 93 9e 00 	sts	0x009E, r24
			/*case 'p': writeTotalDistance();
				break;*/
		}
		control_timer = 0;
 41a:	10 92 aa 00 	sts	0x00AA, r1
 41e:	10 92 a9 00 	sts	0x00A9, r1
		data_flag = FALSE;
 422:	10 92 9d 00 	sts	0x009D, r1
	}
	if(control_timer == 1000){
 426:	80 91 a9 00 	lds	r24, 0x00A9
 42a:	90 91 aa 00 	lds	r25, 0x00AA
 42e:	88 3e       	cpi	r24, 0xE8	; 232
 430:	93 40       	sbci	r25, 0x03	; 3
 432:	11 f4       	brne	.+4      	; 0x438 <i2c+0x8c>
		stopDriving();
 434:	0e 94 cd 01 	call	0x39a	; 0x39a <stopDriving>
 438:	08 95       	ret

0000043a <getBumperRight>:
	curPower_left = 0;
	curPower_right = 0;
}

uint8_t getBumperRight(void){
	PORTC &= ~SL3;
 43a:	ae 98       	cbi	0x15, 6	; 21
	DDRC &= ~SL3;
 43c:	a6 98       	cbi	0x14, 6	; 20
	uint8_t tmp = PINC & SL3;
 43e:	83 b3       	in	r24, 0x13	; 19
	return tmp;
}
 440:	80 74       	andi	r24, 0x40	; 64
 442:	08 95       	ret

00000444 <getBumperLeft>:

uint8_t getBumperLeft(void){
	PORTB &= ~SL6;
 444:	c0 98       	cbi	0x18, 0	; 24
	DDRB &= ~SL6;
 446:	b8 98       	cbi	0x17, 0	; 23
	uint8_t tmp = PINB & SL6;
 448:	86 b3       	in	r24, 0x16	; 22
	return tmp;
}
 44a:	81 70       	andi	r24, 0x01	; 1
 44c:	08 95       	ret

0000044e <getTotalDistance>:
	return interrupts * 0.25; //return distance in mm
}

//returns the total driven distance in amount of interrupts
float getTotalDistance(){
	return (motorDistanceTotal_right + motorDistanceTotal_left)/2.0;
 44e:	60 91 a3 00 	lds	r22, 0x00A3
 452:	70 91 a4 00 	lds	r23, 0x00A4
 456:	80 91 a1 00 	lds	r24, 0x00A1
 45a:	90 91 a2 00 	lds	r25, 0x00A2
 45e:	68 0f       	add	r22, r24
 460:	79 1f       	adc	r23, r25
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__floatunsisf>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	5f e3       	ldi	r21, 0x3F	; 63
 472:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsf3>
}
 476:	08 95       	ret

00000478 <dynamicUpdate>:
	if(curSpeed_left < desiredSpeed_left) curPower_left++;
	if(curSpeed_right > desiredSpeed_right) curPower_right--;
	if(curSpeed_left > desiredSpeed_left) curPower_left--;
	setMotorPower(curPower_right, curPower_left);*/
	
	if(curPower_left || curPower_right)
 478:	80 91 ad 00 	lds	r24, 0x00AD
 47c:	81 11       	cpse	r24, r1
 47e:	04 c0       	rjmp	.+8      	; 0x488 <dynamicUpdate+0x10>
 480:	80 91 ac 00 	lds	r24, 0x00AC
 484:	88 23       	and	r24, r24
 486:	19 f0       	breq	.+6      	; 0x48e <dynamicUpdate+0x16>
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
 488:	82 ea       	ldi	r24, 0xA2	; 162
 48a:	8f bd       	out	0x2f, r24	; 47
 48c:	01 c0       	rjmp	.+2      	; 0x490 <dynamicUpdate+0x18>
	else
	TCCR1A = 0;
 48e:	1f bc       	out	0x2f, r1	; 47
	
	if(getTotalDistance() >= 200){
 490:	0e 94 27 02 	call	0x44e	; 0x44e <getTotalDistance>
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	48 e4       	ldi	r20, 0x48	; 72
 49a:	53 e4       	ldi	r21, 0x43	; 67
 49c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__gesf2>
 4a0:	88 23       	and	r24, r24
 4a2:	6c f0       	brlt	.+26     	; 0x4be <dynamicUpdate+0x46>
		motorDistanceTotalCM ++;
 4a4:	80 91 a0 00 	lds	r24, 0x00A0
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	80 93 a0 00 	sts	0x00A0, r24
		motorDistanceTotal_left = 0;
 4ae:	10 92 a4 00 	sts	0x00A4, r1
 4b2:	10 92 a3 00 	sts	0x00A3, r1
		motorDistanceTotal_right = 0;
 4b6:	10 92 a2 00 	sts	0x00A2, r1
 4ba:	10 92 a1 00 	sts	0x00A1, r1
	}
	if(getBumperRight() || getBumperLeft()){
 4be:	0e 94 1d 02 	call	0x43a	; 0x43a <getBumperRight>
 4c2:	81 11       	cpse	r24, r1
 4c4:	03 c0       	rjmp	.+6      	; 0x4cc <dynamicUpdate+0x54>
 4c6:	0e 94 22 02 	call	0x444	; 0x444 <getBumperLeft>
 4ca:	81 11       	cpse	r24, r1
	 stopDriving();
 4cc:	0e 94 cd 01 	call	0x39a	; 0x39a <stopDriving>
 4d0:	08 95       	ret

000004d2 <main>:

#include "main.h"

int main(void)
{	
	init();
 4d2:	0e 94 49 01 	call	0x292	; 0x292 <init>
    while (1) 
    {
		if(motorDistanceTotalCM > 10){
 4d6:	80 91 a0 00 	lds	r24, 0x00A0
 4da:	8b 30       	cpi	r24, 0x0B	; 11
 4dc:	10 f0       	brcs	.+4      	; 0x4e2 <main+0x10>
			rijVooruit();
 4de:	0e 94 75 01 	call	0x2ea	; 0x2ea <rijVooruit>
		}
		i2c();
 4e2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c>
		dynamicUpdate();
 4e6:	0e 94 3c 02 	call	0x478	; 0x478 <dynamicUpdate>
    }
 4ea:	f5 cf       	rjmp	.-22     	; 0x4d6 <main+0x4>

000004ec <__vector_1>:
	motorDistanceTotalCM = 0;
	return temp; //databyte++;
}

//external interrupt int0 left motor sensor
ISR (INT0_vect){
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
	motorDistance_left++;	//increment the amount of interrupts on the left side
 4fa:	80 91 a6 00 	lds	r24, 0x00A6
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 93 a6 00 	sts	0x00A6, r24

	if(curDirection_right == curDirection_left)//if the car is not rotating increment the total distance
 504:	90 91 a7 00 	lds	r25, 0x00A7
 508:	80 91 a8 00 	lds	r24, 0x00A8
 50c:	98 13       	cpse	r25, r24
 50e:	09 c0       	rjmp	.+18     	; 0x522 <__vector_1+0x36>
		motorDistanceTotal_left++;
 510:	80 91 a3 00 	lds	r24, 0x00A3
 514:	90 91 a4 00 	lds	r25, 0x00A4
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	90 93 a4 00 	sts	0x00A4, r25
 51e:	80 93 a3 00 	sts	0x00A3, r24
}
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_2>:

//external interrupt int1 right motor sensor
ISR (INT1_vect){
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
	motorDistance_right++;	//increment the amount of interrupts on the right side
 53e:	80 91 a5 00 	lds	r24, 0x00A5
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 a5 00 	sts	0x00A5, r24

	if(curDirection_right == curDirection_left)//if the car is not rotating increment the total distance
 548:	90 91 a7 00 	lds	r25, 0x00A7
 54c:	80 91 a8 00 	lds	r24, 0x00A8
 550:	98 13       	cpse	r25, r24
 552:	09 c0       	rjmp	.+18     	; 0x566 <__vector_2+0x36>
		motorDistanceTotal_right++;
 554:	80 91 a1 00 	lds	r24, 0x00A1
 558:	90 91 a2 00 	lds	r25, 0x00A2
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	90 93 a2 00 	sts	0x00A2, r25
 562:	80 93 a1 00 	sts	0x00A1, r24
}
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_10>:

//timer interrupt for calc purposes
ISR (TIMER0_COMP_vect){
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
	
	if(ms_timer++ >= 9) {//1 interrupt per ms
 582:	80 91 ab 00 	lds	r24, 0x00AB
 586:	89 30       	cpi	r24, 0x09	; 9
 588:	20 f4       	brcc	.+8      	; 0x592 <__vector_10+0x1e>
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 93 ab 00 	sts	0x00AB, r24
 590:	0b c0       	rjmp	.+22     	; 0x5a8 <__vector_10+0x34>
		if(update_timer++ > 2){
			dynamicUpdate();
			update_timer = 0;
		}*/
		
		ms_timer = 0;
 592:	10 92 ab 00 	sts	0x00AB, r1
		
		control_timer ++;
 596:	80 91 a9 00 	lds	r24, 0x00A9
 59a:	90 91 aa 00 	lds	r25, 0x00AA
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	90 93 aa 00 	sts	0x00AA, r25
 5a4:	80 93 a9 00 	sts	0x00A9, r24
	}
}
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <__vector_19>:

//i2c interrupt
ISR(TWI_vect) {
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	/*snelheid = 100;
	rijVooruit();*/
	slaaftwi();
 5d8:	0e 94 68 00 	call	0xd0	; 0xd0 <slaaftwi>

}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__floatunsisf>:
 5fe:	e8 94       	clt
 600:	09 c0       	rjmp	.+18     	; 0x614 <__floatsisf+0x12>

00000602 <__floatsisf>:
 602:	97 fb       	bst	r25, 7
 604:	3e f4       	brtc	.+14     	; 0x614 <__floatsisf+0x12>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	99 23       	and	r25, r25
 616:	a9 f0       	breq	.+42     	; 0x642 <__floatsisf+0x40>
 618:	f9 2f       	mov	r31, r25
 61a:	96 e9       	ldi	r25, 0x96	; 150
 61c:	bb 27       	eor	r27, r27
 61e:	93 95       	inc	r25
 620:	f6 95       	lsr	r31
 622:	87 95       	ror	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f1 11       	cpse	r31, r1
 62c:	f8 cf       	rjmp	.-16     	; 0x61e <__floatsisf+0x1c>
 62e:	fa f4       	brpl	.+62     	; 0x66e <__floatsisf+0x6c>
 630:	bb 0f       	add	r27, r27
 632:	11 f4       	brne	.+4      	; 0x638 <__floatsisf+0x36>
 634:	60 ff       	sbrs	r22, 0
 636:	1b c0       	rjmp	.+54     	; 0x66e <__floatsisf+0x6c>
 638:	6f 5f       	subi	r22, 0xFF	; 255
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	16 c0       	rjmp	.+44     	; 0x66e <__floatsisf+0x6c>
 642:	88 23       	and	r24, r24
 644:	11 f0       	breq	.+4      	; 0x64a <__floatsisf+0x48>
 646:	96 e9       	ldi	r25, 0x96	; 150
 648:	11 c0       	rjmp	.+34     	; 0x66c <__floatsisf+0x6a>
 64a:	77 23       	and	r23, r23
 64c:	21 f0       	breq	.+8      	; 0x656 <__floatsisf+0x54>
 64e:	9e e8       	ldi	r25, 0x8E	; 142
 650:	87 2f       	mov	r24, r23
 652:	76 2f       	mov	r23, r22
 654:	05 c0       	rjmp	.+10     	; 0x660 <__floatsisf+0x5e>
 656:	66 23       	and	r22, r22
 658:	71 f0       	breq	.+28     	; 0x676 <__floatsisf+0x74>
 65a:	96 e8       	ldi	r25, 0x86	; 134
 65c:	86 2f       	mov	r24, r22
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	2a f0       	brmi	.+10     	; 0x66e <__floatsisf+0x6c>
 664:	9a 95       	dec	r25
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	da f7       	brpl	.-10     	; 0x664 <__floatsisf+0x62>
 66e:	88 0f       	add	r24, r24
 670:	96 95       	lsr	r25
 672:	87 95       	ror	r24
 674:	97 f9       	bld	r25, 7
 676:	08 95       	ret

00000678 <__fp_cmp>:
 678:	99 0f       	add	r25, r25
 67a:	00 08       	sbc	r0, r0
 67c:	55 0f       	add	r21, r21
 67e:	aa 0b       	sbc	r26, r26
 680:	e0 e8       	ldi	r30, 0x80	; 128
 682:	fe ef       	ldi	r31, 0xFE	; 254
 684:	16 16       	cp	r1, r22
 686:	17 06       	cpc	r1, r23
 688:	e8 07       	cpc	r30, r24
 68a:	f9 07       	cpc	r31, r25
 68c:	c0 f0       	brcs	.+48     	; 0x6be <__fp_cmp+0x46>
 68e:	12 16       	cp	r1, r18
 690:	13 06       	cpc	r1, r19
 692:	e4 07       	cpc	r30, r20
 694:	f5 07       	cpc	r31, r21
 696:	98 f0       	brcs	.+38     	; 0x6be <__fp_cmp+0x46>
 698:	62 1b       	sub	r22, r18
 69a:	73 0b       	sbc	r23, r19
 69c:	84 0b       	sbc	r24, r20
 69e:	95 0b       	sbc	r25, r21
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <__fp_cmp+0x38>
 6a2:	0a 26       	eor	r0, r26
 6a4:	61 f0       	breq	.+24     	; 0x6be <__fp_cmp+0x46>
 6a6:	23 2b       	or	r18, r19
 6a8:	24 2b       	or	r18, r20
 6aa:	25 2b       	or	r18, r21
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <__fp_cmp+0x3e>
 6ae:	08 95       	ret
 6b0:	0a 26       	eor	r0, r26
 6b2:	09 f4       	brne	.+2      	; 0x6b6 <__fp_cmp+0x3e>
 6b4:	a1 40       	sbci	r26, 0x01	; 1
 6b6:	a6 95       	lsr	r26
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	81 1d       	adc	r24, r1
 6bc:	81 1d       	adc	r24, r1
 6be:	08 95       	ret

000006c0 <__gesf2>:
 6c0:	0e 94 3c 03 	call	0x678	; 0x678 <__fp_cmp>
 6c4:	08 f4       	brcc	.+2      	; 0x6c8 <__gesf2+0x8>
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	08 95       	ret

000006ca <__mulsf3>:
 6ca:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__mulsf3x>
 6ce:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_round>
 6d2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_pscA>
 6d6:	38 f0       	brcs	.+14     	; 0x6e6 <__mulsf3+0x1c>
 6d8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscB>
 6dc:	20 f0       	brcs	.+8      	; 0x6e6 <__mulsf3+0x1c>
 6de:	95 23       	and	r25, r21
 6e0:	11 f0       	breq	.+4      	; 0x6e6 <__mulsf3+0x1c>
 6e2:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>
 6e6:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__fp_nan>
 6ea:	11 24       	eor	r1, r1
 6ec:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>

000006f0 <__mulsf3x>:
 6f0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_split3>
 6f4:	70 f3       	brcs	.-36     	; 0x6d2 <__mulsf3+0x8>

000006f6 <__mulsf3_pse>:
 6f6:	95 9f       	mul	r25, r21
 6f8:	c1 f3       	breq	.-16     	; 0x6ea <__mulsf3+0x20>
 6fa:	95 0f       	add	r25, r21
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	55 1f       	adc	r21, r21
 700:	62 9f       	mul	r22, r18
 702:	f0 01       	movw	r30, r0
 704:	72 9f       	mul	r23, r18
 706:	bb 27       	eor	r27, r27
 708:	f0 0d       	add	r31, r0
 70a:	b1 1d       	adc	r27, r1
 70c:	63 9f       	mul	r22, r19
 70e:	aa 27       	eor	r26, r26
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	aa 1f       	adc	r26, r26
 716:	64 9f       	mul	r22, r20
 718:	66 27       	eor	r22, r22
 71a:	b0 0d       	add	r27, r0
 71c:	a1 1d       	adc	r26, r1
 71e:	66 1f       	adc	r22, r22
 720:	82 9f       	mul	r24, r18
 722:	22 27       	eor	r18, r18
 724:	b0 0d       	add	r27, r0
 726:	a1 1d       	adc	r26, r1
 728:	62 1f       	adc	r22, r18
 72a:	73 9f       	mul	r23, r19
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	83 9f       	mul	r24, r19
 734:	a0 0d       	add	r26, r0
 736:	61 1d       	adc	r22, r1
 738:	22 1f       	adc	r18, r18
 73a:	74 9f       	mul	r23, r20
 73c:	33 27       	eor	r19, r19
 73e:	a0 0d       	add	r26, r0
 740:	61 1d       	adc	r22, r1
 742:	23 1f       	adc	r18, r19
 744:	84 9f       	mul	r24, r20
 746:	60 0d       	add	r22, r0
 748:	21 1d       	adc	r18, r1
 74a:	82 2f       	mov	r24, r18
 74c:	76 2f       	mov	r23, r22
 74e:	6a 2f       	mov	r22, r26
 750:	11 24       	eor	r1, r1
 752:	9f 57       	subi	r25, 0x7F	; 127
 754:	50 40       	sbci	r21, 0x00	; 0
 756:	9a f0       	brmi	.+38     	; 0x77e <__mulsf3_pse+0x88>
 758:	f1 f0       	breq	.+60     	; 0x796 <__mulsf3_pse+0xa0>
 75a:	88 23       	and	r24, r24
 75c:	4a f0       	brmi	.+18     	; 0x770 <__mulsf3_pse+0x7a>
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	bb 1f       	adc	r27, r27
 764:	66 1f       	adc	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	50 40       	sbci	r21, 0x00	; 0
 76e:	a9 f7       	brne	.-22     	; 0x75a <__mulsf3_pse+0x64>
 770:	9e 3f       	cpi	r25, 0xFE	; 254
 772:	51 05       	cpc	r21, r1
 774:	80 f0       	brcs	.+32     	; 0x796 <__mulsf3_pse+0xa0>
 776:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_inf>
 77a:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_szero>
 77e:	5f 3f       	cpi	r21, 0xFF	; 255
 780:	e4 f3       	brlt	.-8      	; 0x77a <__mulsf3_pse+0x84>
 782:	98 3e       	cpi	r25, 0xE8	; 232
 784:	d4 f3       	brlt	.-12     	; 0x77a <__mulsf3_pse+0x84>
 786:	86 95       	lsr	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	e7 95       	ror	r30
 792:	9f 5f       	subi	r25, 0xFF	; 255
 794:	c1 f7       	brne	.-16     	; 0x786 <__mulsf3_pse+0x90>
 796:	fe 2b       	or	r31, r30
 798:	88 0f       	add	r24, r24
 79a:	91 1d       	adc	r25, r1
 79c:	96 95       	lsr	r25
 79e:	87 95       	ror	r24
 7a0:	97 f9       	bld	r25, 7
 7a2:	08 95       	ret

000007a4 <__fp_inf>:
 7a4:	97 f9       	bld	r25, 7
 7a6:	9f 67       	ori	r25, 0x7F	; 127
 7a8:	80 e8       	ldi	r24, 0x80	; 128
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	08 95       	ret

000007b0 <__fp_nan>:
 7b0:	9f ef       	ldi	r25, 0xFF	; 255
 7b2:	80 ec       	ldi	r24, 0xC0	; 192
 7b4:	08 95       	ret

000007b6 <__fp_pscA>:
 7b6:	00 24       	eor	r0, r0
 7b8:	0a 94       	dec	r0
 7ba:	16 16       	cp	r1, r22
 7bc:	17 06       	cpc	r1, r23
 7be:	18 06       	cpc	r1, r24
 7c0:	09 06       	cpc	r0, r25
 7c2:	08 95       	ret

000007c4 <__fp_pscB>:
 7c4:	00 24       	eor	r0, r0
 7c6:	0a 94       	dec	r0
 7c8:	12 16       	cp	r1, r18
 7ca:	13 06       	cpc	r1, r19
 7cc:	14 06       	cpc	r1, r20
 7ce:	05 06       	cpc	r0, r21
 7d0:	08 95       	ret

000007d2 <__fp_round>:
 7d2:	09 2e       	mov	r0, r25
 7d4:	03 94       	inc	r0
 7d6:	00 0c       	add	r0, r0
 7d8:	11 f4       	brne	.+4      	; 0x7de <__fp_round+0xc>
 7da:	88 23       	and	r24, r24
 7dc:	52 f0       	brmi	.+20     	; 0x7f2 <__fp_round+0x20>
 7de:	bb 0f       	add	r27, r27
 7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__fp_round+0x20>
 7e2:	bf 2b       	or	r27, r31
 7e4:	11 f4       	brne	.+4      	; 0x7ea <__fp_round+0x18>
 7e6:	60 ff       	sbrs	r22, 0
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <__fp_round+0x20>
 7ea:	6f 5f       	subi	r22, 0xFF	; 255
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255
 7ee:	8f 4f       	sbci	r24, 0xFF	; 255
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__fp_split3>:
 7f4:	57 fd       	sbrc	r21, 7
 7f6:	90 58       	subi	r25, 0x80	; 128
 7f8:	44 0f       	add	r20, r20
 7fa:	55 1f       	adc	r21, r21
 7fc:	59 f0       	breq	.+22     	; 0x814 <__fp_splitA+0x10>
 7fe:	5f 3f       	cpi	r21, 0xFF	; 255
 800:	71 f0       	breq	.+28     	; 0x81e <__fp_splitA+0x1a>
 802:	47 95       	ror	r20

00000804 <__fp_splitA>:
 804:	88 0f       	add	r24, r24
 806:	97 fb       	bst	r25, 7
 808:	99 1f       	adc	r25, r25
 80a:	61 f0       	breq	.+24     	; 0x824 <__fp_splitA+0x20>
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	79 f0       	breq	.+30     	; 0x82e <__fp_splitA+0x2a>
 810:	87 95       	ror	r24
 812:	08 95       	ret
 814:	12 16       	cp	r1, r18
 816:	13 06       	cpc	r1, r19
 818:	14 06       	cpc	r1, r20
 81a:	55 1f       	adc	r21, r21
 81c:	f2 cf       	rjmp	.-28     	; 0x802 <__fp_split3+0xe>
 81e:	46 95       	lsr	r20
 820:	f1 df       	rcall	.-30     	; 0x804 <__fp_splitA>
 822:	08 c0       	rjmp	.+16     	; 0x834 <__fp_splitA+0x30>
 824:	16 16       	cp	r1, r22
 826:	17 06       	cpc	r1, r23
 828:	18 06       	cpc	r1, r24
 82a:	99 1f       	adc	r25, r25
 82c:	f1 cf       	rjmp	.-30     	; 0x810 <__fp_splitA+0xc>
 82e:	86 95       	lsr	r24
 830:	71 05       	cpc	r23, r1
 832:	61 05       	cpc	r22, r1
 834:	08 94       	sec
 836:	08 95       	ret

00000838 <__fp_zero>:
 838:	e8 94       	clt

0000083a <__fp_szero>:
 83a:	bb 27       	eor	r27, r27
 83c:	66 27       	eor	r22, r22
 83e:	77 27       	eor	r23, r23
 840:	cb 01       	movw	r24, r22
 842:	97 f9       	bld	r25, 7
 844:	08 95       	ret

00000846 <__tablejump2__>:
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	05 90       	lpm	r0, Z+
 84c:	f4 91       	lpm	r31, Z
 84e:	e0 2d       	mov	r30, r0
 850:	09 94       	ijmp

00000852 <_exit>:
 852:	f8 94       	cli

00000854 <__stop_program>:
 854:	ff cf       	rjmp	.-2      	; 0x854 <__stop_program>
