
EmbeddedProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000548  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b5  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000200  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000322  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_1>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 37       	cpi	r26, 0x73	; 115
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  74:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setMotorPower>:
	OCR0  = 99;											//output compare register
	
	sei();
}

void setMotorPower(uint8_t right, uint8_t left){
  7c:	83 3d       	cpi	r24, 0xD3	; 211
  7e:	08 f0       	brcs	.+2      	; 0x82 <setMotorPower+0x6>
  80:	82 ed       	ldi	r24, 0xD2	; 210
  82:	63 3d       	cpi	r22, 0xD3	; 211
  84:	08 f0       	brcs	.+2      	; 0x88 <setMotorPower+0xc>
  86:	62 ed       	ldi	r22, 0xD2	; 210
	if(right > 210) right = 210;
	if(left > 210) left = 210;
	OCR1AL = right;
  88:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = left;
  8a:	68 bd       	out	0x28, r22	; 40
  8c:	08 95       	ret

0000008e <setMotorPowerDynamic>:
}

void setMotorPowerDynamic(uint8_t right_des, uint8_t left_des){
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
	while(right_des != curPower_right && left_des != curPower_left){
  92:	90 91 71 00 	lds	r25, 0x0071
  96:	89 17       	cp	r24, r25
  98:	61 f1       	breq	.+88     	; 0xf2 <setMotorPowerDynamic+0x64>
  9a:	d6 2f       	mov	r29, r22
  9c:	c8 2f       	mov	r28, r24
  9e:	20 91 72 00 	lds	r18, 0x0072
  a2:	62 17       	cp	r22, r18
  a4:	31 f1       	breq	.+76     	; 0xf2 <setMotorPowerDynamic+0x64>
		if(right_des < curPower_right) curPower_right--;
  a6:	c9 17       	cp	r28, r25
  a8:	18 f4       	brcc	.+6      	; 0xb0 <setMotorPowerDynamic+0x22>
  aa:	91 50       	subi	r25, 0x01	; 1
  ac:	90 93 71 00 	sts	0x0071, r25
		if(right_des > curPower_right) curPower_right++;
  b0:	90 91 71 00 	lds	r25, 0x0071
  b4:	9c 17       	cp	r25, r28
  b6:	18 f4       	brcc	.+6      	; 0xbe <setMotorPowerDynamic+0x30>
  b8:	9f 5f       	subi	r25, 0xFF	; 255
  ba:	90 93 71 00 	sts	0x0071, r25
		if(left_des < curPower_left) curPower_left--;
  be:	d2 17       	cp	r29, r18
  c0:	18 f4       	brcc	.+6      	; 0xc8 <setMotorPowerDynamic+0x3a>
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	20 93 72 00 	sts	0x0072, r18
		if(left_des > curPower_left) curPower_left++;
  c8:	90 91 72 00 	lds	r25, 0x0072
  cc:	9d 17       	cp	r25, r29
  ce:	18 f4       	brcc	.+6      	; 0xd6 <setMotorPowerDynamic+0x48>
  d0:	9f 5f       	subi	r25, 0xFF	; 255
  d2:	90 93 72 00 	sts	0x0072, r25
		setMotorPower(curPower_right, curPower_left);
  d6:	60 91 72 00 	lds	r22, 0x0072
  da:	80 91 71 00 	lds	r24, 0x0071
  de:	0e 94 3e 00 	call	0x7c	; 0x7c <setMotorPower>
	OCR1AL = right;
	OCR1BL = left;
}

void setMotorPowerDynamic(uint8_t right_des, uint8_t left_des){
	while(right_des != curPower_right && left_des != curPower_left){
  e2:	90 91 71 00 	lds	r25, 0x0071
  e6:	c9 17       	cp	r28, r25
  e8:	21 f0       	breq	.+8      	; 0xf2 <setMotorPowerDynamic+0x64>
  ea:	20 91 72 00 	lds	r18, 0x0072
  ee:	d2 13       	cpse	r29, r18
  f0:	da cf       	rjmp	.-76     	; 0xa6 <setMotorPowerDynamic+0x18>
		if(right_des > curPower_right) curPower_right++;
		if(left_des < curPower_left) curPower_left--;
		if(left_des > curPower_left) curPower_left++;
		setMotorPower(curPower_right, curPower_left);
	}
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <setMotorDirection>:
	if(speedRight < 13) tempR = 0;
	if(speedLeft < 13) tempL = 0;
}

void setMotorDirection(uint8_t left, uint8_t right){
	if(left)
  f8:	88 23       	and	r24, r24
  fa:	11 f0       	breq	.+4      	; 0x100 <setMotorDirection+0x8>
		PORTC |= DIR_L;
  fc:	aa 9a       	sbi	0x15, 2	; 21
  fe:	01 c0       	rjmp	.+2      	; 0x102 <setMotorDirection+0xa>
	else
		PORTC &= ~DIR_L;
 100:	aa 98       	cbi	0x15, 2	; 21
		
	if(right)
 102:	66 23       	and	r22, r22
 104:	11 f0       	breq	.+4      	; 0x10a <setMotorDirection+0x12>
		PORTC |= DIR_R;
 106:	ab 9a       	sbi	0x15, 3	; 21
 108:	01 c0       	rjmp	.+2      	; 0x10c <setMotorDirection+0x14>
	else
		PORTC &= ~DIR_R;
 10a:	ab 98       	cbi	0x15, 3	; 21
		
	curDirection_right = right;
 10c:	60 93 66 00 	sts	0x0066, r22
	curDirection_left = left;
 110:	80 93 67 00 	sts	0x0067, r24
 114:	08 95       	ret

00000116 <init>:
    }
	return(0);
}

void init(){
	cli();
 116:	f8 94       	cli
	
	//set pins I/O
	//DDRA = 0x00; //00000000
	//DDRB =  //11011011
	DDRC= DIR_R | DIR_L; //111111xx
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	84 bb       	out	0x14, r24	; 20
	DDRD = MOTOR_R | MOTOR_L; //01110010
 11c:	80 e3       	ldi	r24, 0x30	; 48
 11e:	81 bb       	out	0x11, r24	; 17
	
	//initialiseer PWM
	TCCR1A = (0 << WGM10) | (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
 120:	82 ea       	ldi	r24, 0xA2	; 162
 122:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =  (1 << WGM13) | (0 << WGM12) | (1 << CS10);
 124:	81 e1       	ldi	r24, 0x11	; 17
 126:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 210; 
 128:	82 ed       	ldi	r24, 0xD2	; 210
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	97 bd       	out	0x27, r25	; 39
 12e:	86 bd       	out	0x26, r24	; 38
	OCR1AL = 0;
 130:	1a bc       	out	0x2a, r1	; 42
	OCR1BL = 0;
 132:	18 bc       	out	0x28, r1	; 40
	setMotorDirection(FWD, FWD);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 7c 00 	call	0xf8	; 0xf8 <setMotorDirection>
	
	//initialiseer interrupts: int0 links, int1 rechts
	MCUCR = (0 << ISC11) | (1 << ISC10) | (0 << ISC01) | (1 << ISC00);
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	85 bf       	out	0x35, r24	; 53
	GICR = (1 << INT2) | (1 << INT1);
 140:	80 ea       	ldi	r24, 0xA0	; 160
 142:	8b bf       	out	0x3b, r24	; 59

	//initialiseer Timer 0: 100µs cycle
	TCCR0 =   (0 << WGM00) | (1 << WGM01)				//Counter mode:CTC Top:OCR0 Update:Immediate TOV0flag set on:MAX
 144:	8a e0       	ldi	r24, 0x0A	; 10
 146:	83 bf       	out	0x33, r24	; 51
			| (0 << COM00) | (0 << COM01)				//normal port OC0 disconnected
			| (0 << CS02)  | (1 << CS01) | (0 << CS00); //8bit prescaler
	OCR0  = 99;											//output compare register
 148:	83 e6       	ldi	r24, 0x63	; 99
 14a:	8c bf       	out	0x3c, r24	; 60
	
	sei();
 14c:	78 94       	sei
 14e:	08 95       	ret

00000150 <main>:
uint8_t motorDistanceTotal_left = 0;
uint8_t motorDistanceTotal_right = 0;

int main(void)
{	
	init();
 150:	0e 94 8b 00 	call	0x116	; 0x116 <init>
    while (1) 
    {
		setMotorPowerDynamic(200, 200);
 154:	68 ec       	ldi	r22, 0xC8	; 200
 156:	88 ec       	ldi	r24, 0xC8	; 200
 158:	0e 94 47 00 	call	0x8e	; 0x8e <setMotorPowerDynamic>
		//setMotorPowerDynamic(0,0);	
    }
 15c:	fb cf       	rjmp	.-10     	; 0x154 <main+0x4>

0000015e <__vector_1>:
float getTotalDistance(){
	return getDistanceByInterrupts((motorDistanceTotal_right + motorDistanceTotal_left)/2);
}

//external interrupt int0 left motor sensor
ISR (INT0_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	motorDistance_left++;
 16c:	80 91 65 00 	lds	r24, 0x0065
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 65 00 	sts	0x0065, r24

	if(curDirection_right == curDirection_left)
 176:	90 91 66 00 	lds	r25, 0x0066
 17a:	80 91 67 00 	lds	r24, 0x0067
 17e:	98 13       	cpse	r25, r24
 180:	05 c0       	rjmp	.+10     	; 0x18c <__vector_1+0x2e>
		motorDistanceTotal_left++;
 182:	80 91 61 00 	lds	r24, 0x0061
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 61 00 	sts	0x0061, r24
}
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_2>:

//external interrupt int1 right motor sensor
ISR (INT1_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
	motorDistance_right++;
 1a8:	80 91 64 00 	lds	r24, 0x0064
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 64 00 	sts	0x0064, r24

	if(curDirection_right == curDirection_left)
 1b2:	90 91 66 00 	lds	r25, 0x0066
 1b6:	80 91 67 00 	lds	r24, 0x0067
 1ba:	98 13       	cpse	r25, r24
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <__vector_2+0x2e>
		motorDistanceTotal_right++;
 1be:	80 91 60 00 	lds	r24, 0x0060
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 60 00 	sts	0x0060, r24
}
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_10>:

//timer interrupt for calc purposes
ISR (TIMER0_COMP_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	//calculate speed of both sides
	if(speed_timer++ > SPEED_TIMER_TRIGGER){
 1fc:	80 91 68 00 	lds	r24, 0x0068
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	98 0f       	add	r25, r24
 204:	90 93 68 00 	sts	0x0068, r25
 208:	89 3c       	cpi	r24, 0xC9	; 201
 20a:	08 f4       	brcc	.+2      	; 0x20e <__vector_10+0x38>
 20c:	44 c0       	rjmp	.+136    	; 0x296 <__vector_10+0xc0>
		curSpeed_right = getDistanceByInterrupts(motorDistance_right - motorDistanceLast_right) * 5; //in mm/s
 20e:	c0 91 64 00 	lds	r28, 0x0064
 212:	80 91 62 00 	lds	r24, 0x0062
 216:	6c 2f       	mov	r22, r28
 218:	68 1b       	sub	r22, r24
void naarRechts(int graden){
	//TODO gebruik kompas
}

float getDistanceByInterrupts(uint8_t interrupts){
	return interrupts * 0.25; //return distance in mm
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__floatsisf>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e8       	ldi	r20, 0x80	; 128
 22a:	5e e3       	ldi	r21, 0x3E	; 62
 22c:	0e 94 9b 01 	call	0x336	; 0x336 <__mulsf3>

//timer interrupt for calc purposes
ISR (TIMER0_COMP_vect){
	//calculate speed of both sides
	if(speed_timer++ > SPEED_TIMER_TRIGGER){
		curSpeed_right = getDistanceByInterrupts(motorDistance_right - motorDistanceLast_right) * 5; //in mm/s
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	40 ea       	ldi	r20, 0xA0	; 160
 236:	50 e4       	ldi	r21, 0x40	; 64
 238:	0e 94 9b 01 	call	0x336	; 0x336 <__mulsf3>
 23c:	60 93 69 00 	sts	0x0069, r22
 240:	70 93 6a 00 	sts	0x006A, r23
 244:	80 93 6b 00 	sts	0x006B, r24
 248:	90 93 6c 00 	sts	0x006C, r25
		curSpeed_left = getDistanceByInterrupts(motorDistance_left - motorDistanceLast_left) * 5;	 //in mm/s
 24c:	d0 91 65 00 	lds	r29, 0x0065
 250:	80 91 63 00 	lds	r24, 0x0063
 254:	6d 2f       	mov	r22, r29
 256:	68 1b       	sub	r22, r24
void naarRechts(int graden){
	//TODO gebruik kompas
}

float getDistanceByInterrupts(uint8_t interrupts){
	return interrupts * 0.25; //return distance in mm
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <__floatsisf>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e8       	ldi	r20, 0x80	; 128
 268:	5e e3       	ldi	r21, 0x3E	; 62
 26a:	0e 94 9b 01 	call	0x336	; 0x336 <__mulsf3>
//timer interrupt for calc purposes
ISR (TIMER0_COMP_vect){
	//calculate speed of both sides
	if(speed_timer++ > SPEED_TIMER_TRIGGER){
		curSpeed_right = getDistanceByInterrupts(motorDistance_right - motorDistanceLast_right) * 5; //in mm/s
		curSpeed_left = getDistanceByInterrupts(motorDistance_left - motorDistanceLast_left) * 5;	 //in mm/s
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	40 ea       	ldi	r20, 0xA0	; 160
 274:	50 e4       	ldi	r21, 0x40	; 64
 276:	0e 94 9b 01 	call	0x336	; 0x336 <__mulsf3>
 27a:	60 93 6d 00 	sts	0x006D, r22
 27e:	70 93 6e 00 	sts	0x006E, r23
 282:	80 93 6f 00 	sts	0x006F, r24
 286:	90 93 70 00 	sts	0x0070, r25

		motorDistanceLast_left = motorDistance_left;
 28a:	d0 93 63 00 	sts	0x0063, r29
		motorDistanceLast_right = motorDistance_right;
 28e:	c0 93 62 00 	sts	0x0062, r28
		speed_timer = 0;
 292:	10 92 68 00 	sts	0x0068, r1
	}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__floatunsisf>:
 2bc:	e8 94       	clt
 2be:	09 c0       	rjmp	.+18     	; 0x2d2 <__floatsisf+0x12>

000002c0 <__floatsisf>:
 2c0:	97 fb       	bst	r25, 7
 2c2:	3e f4       	brtc	.+14     	; 0x2d2 <__floatsisf+0x12>
 2c4:	90 95       	com	r25
 2c6:	80 95       	com	r24
 2c8:	70 95       	com	r23
 2ca:	61 95       	neg	r22
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	9f 4f       	sbci	r25, 0xFF	; 255
 2d2:	99 23       	and	r25, r25
 2d4:	a9 f0       	breq	.+42     	; 0x300 <__floatsisf+0x40>
 2d6:	f9 2f       	mov	r31, r25
 2d8:	96 e9       	ldi	r25, 0x96	; 150
 2da:	bb 27       	eor	r27, r27
 2dc:	93 95       	inc	r25
 2de:	f6 95       	lsr	r31
 2e0:	87 95       	ror	r24
 2e2:	77 95       	ror	r23
 2e4:	67 95       	ror	r22
 2e6:	b7 95       	ror	r27
 2e8:	f1 11       	cpse	r31, r1
 2ea:	f8 cf       	rjmp	.-16     	; 0x2dc <__floatsisf+0x1c>
 2ec:	fa f4       	brpl	.+62     	; 0x32c <__floatsisf+0x6c>
 2ee:	bb 0f       	add	r27, r27
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <__floatsisf+0x36>
 2f2:	60 ff       	sbrs	r22, 0
 2f4:	1b c0       	rjmp	.+54     	; 0x32c <__floatsisf+0x6c>
 2f6:	6f 5f       	subi	r22, 0xFF	; 255
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	8f 4f       	sbci	r24, 0xFF	; 255
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <__floatsisf+0x6c>
 300:	88 23       	and	r24, r24
 302:	11 f0       	breq	.+4      	; 0x308 <__floatsisf+0x48>
 304:	96 e9       	ldi	r25, 0x96	; 150
 306:	11 c0       	rjmp	.+34     	; 0x32a <__floatsisf+0x6a>
 308:	77 23       	and	r23, r23
 30a:	21 f0       	breq	.+8      	; 0x314 <__floatsisf+0x54>
 30c:	9e e8       	ldi	r25, 0x8E	; 142
 30e:	87 2f       	mov	r24, r23
 310:	76 2f       	mov	r23, r22
 312:	05 c0       	rjmp	.+10     	; 0x31e <__floatsisf+0x5e>
 314:	66 23       	and	r22, r22
 316:	71 f0       	breq	.+28     	; 0x334 <__floatsisf+0x74>
 318:	96 e8       	ldi	r25, 0x86	; 134
 31a:	86 2f       	mov	r24, r22
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	2a f0       	brmi	.+10     	; 0x32c <__floatsisf+0x6c>
 322:	9a 95       	dec	r25
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	88 1f       	adc	r24, r24
 32a:	da f7       	brpl	.-10     	; 0x322 <__floatsisf+0x62>
 32c:	88 0f       	add	r24, r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	97 f9       	bld	r25, 7
 334:	08 95       	ret

00000336 <__mulsf3>:
 336:	0e 94 ae 01 	call	0x35c	; 0x35c <__mulsf3x>
 33a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_round>
 33e:	0e 94 11 02 	call	0x422	; 0x422 <__fp_pscA>
 342:	38 f0       	brcs	.+14     	; 0x352 <__mulsf3+0x1c>
 344:	0e 94 18 02 	call	0x430	; 0x430 <__fp_pscB>
 348:	20 f0       	brcs	.+8      	; 0x352 <__mulsf3+0x1c>
 34a:	95 23       	and	r25, r21
 34c:	11 f0       	breq	.+4      	; 0x352 <__mulsf3+0x1c>
 34e:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_inf>
 352:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__fp_nan>
 356:	11 24       	eor	r1, r1
 358:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>

0000035c <__mulsf3x>:
 35c:	0e 94 30 02 	call	0x460	; 0x460 <__fp_split3>
 360:	70 f3       	brcs	.-36     	; 0x33e <__mulsf3+0x8>

00000362 <__mulsf3_pse>:
 362:	95 9f       	mul	r25, r21
 364:	c1 f3       	breq	.-16     	; 0x356 <__mulsf3+0x20>
 366:	95 0f       	add	r25, r21
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	55 1f       	adc	r21, r21
 36c:	62 9f       	mul	r22, r18
 36e:	f0 01       	movw	r30, r0
 370:	72 9f       	mul	r23, r18
 372:	bb 27       	eor	r27, r27
 374:	f0 0d       	add	r31, r0
 376:	b1 1d       	adc	r27, r1
 378:	63 9f       	mul	r22, r19
 37a:	aa 27       	eor	r26, r26
 37c:	f0 0d       	add	r31, r0
 37e:	b1 1d       	adc	r27, r1
 380:	aa 1f       	adc	r26, r26
 382:	64 9f       	mul	r22, r20
 384:	66 27       	eor	r22, r22
 386:	b0 0d       	add	r27, r0
 388:	a1 1d       	adc	r26, r1
 38a:	66 1f       	adc	r22, r22
 38c:	82 9f       	mul	r24, r18
 38e:	22 27       	eor	r18, r18
 390:	b0 0d       	add	r27, r0
 392:	a1 1d       	adc	r26, r1
 394:	62 1f       	adc	r22, r18
 396:	73 9f       	mul	r23, r19
 398:	b0 0d       	add	r27, r0
 39a:	a1 1d       	adc	r26, r1
 39c:	62 1f       	adc	r22, r18
 39e:	83 9f       	mul	r24, r19
 3a0:	a0 0d       	add	r26, r0
 3a2:	61 1d       	adc	r22, r1
 3a4:	22 1f       	adc	r18, r18
 3a6:	74 9f       	mul	r23, r20
 3a8:	33 27       	eor	r19, r19
 3aa:	a0 0d       	add	r26, r0
 3ac:	61 1d       	adc	r22, r1
 3ae:	23 1f       	adc	r18, r19
 3b0:	84 9f       	mul	r24, r20
 3b2:	60 0d       	add	r22, r0
 3b4:	21 1d       	adc	r18, r1
 3b6:	82 2f       	mov	r24, r18
 3b8:	76 2f       	mov	r23, r22
 3ba:	6a 2f       	mov	r22, r26
 3bc:	11 24       	eor	r1, r1
 3be:	9f 57       	subi	r25, 0x7F	; 127
 3c0:	50 40       	sbci	r21, 0x00	; 0
 3c2:	9a f0       	brmi	.+38     	; 0x3ea <__mulsf3_pse+0x88>
 3c4:	f1 f0       	breq	.+60     	; 0x402 <__mulsf3_pse+0xa0>
 3c6:	88 23       	and	r24, r24
 3c8:	4a f0       	brmi	.+18     	; 0x3dc <__mulsf3_pse+0x7a>
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	bb 1f       	adc	r27, r27
 3d0:	66 1f       	adc	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	91 50       	subi	r25, 0x01	; 1
 3d8:	50 40       	sbci	r21, 0x00	; 0
 3da:	a9 f7       	brne	.-22     	; 0x3c6 <__mulsf3_pse+0x64>
 3dc:	9e 3f       	cpi	r25, 0xFE	; 254
 3de:	51 05       	cpc	r21, r1
 3e0:	80 f0       	brcs	.+32     	; 0x402 <__mulsf3_pse+0xa0>
 3e2:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_inf>
 3e6:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_szero>
 3ea:	5f 3f       	cpi	r21, 0xFF	; 255
 3ec:	e4 f3       	brlt	.-8      	; 0x3e6 <__mulsf3_pse+0x84>
 3ee:	98 3e       	cpi	r25, 0xE8	; 232
 3f0:	d4 f3       	brlt	.-12     	; 0x3e6 <__mulsf3_pse+0x84>
 3f2:	86 95       	lsr	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b7 95       	ror	r27
 3fa:	f7 95       	ror	r31
 3fc:	e7 95       	ror	r30
 3fe:	9f 5f       	subi	r25, 0xFF	; 255
 400:	c1 f7       	brne	.-16     	; 0x3f2 <__mulsf3_pse+0x90>
 402:	fe 2b       	or	r31, r30
 404:	88 0f       	add	r24, r24
 406:	91 1d       	adc	r25, r1
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret

00000410 <__fp_inf>:
 410:	97 f9       	bld	r25, 7
 412:	9f 67       	ori	r25, 0x7F	; 127
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	08 95       	ret

0000041c <__fp_nan>:
 41c:	9f ef       	ldi	r25, 0xFF	; 255
 41e:	80 ec       	ldi	r24, 0xC0	; 192
 420:	08 95       	ret

00000422 <__fp_pscA>:
 422:	00 24       	eor	r0, r0
 424:	0a 94       	dec	r0
 426:	16 16       	cp	r1, r22
 428:	17 06       	cpc	r1, r23
 42a:	18 06       	cpc	r1, r24
 42c:	09 06       	cpc	r0, r25
 42e:	08 95       	ret

00000430 <__fp_pscB>:
 430:	00 24       	eor	r0, r0
 432:	0a 94       	dec	r0
 434:	12 16       	cp	r1, r18
 436:	13 06       	cpc	r1, r19
 438:	14 06       	cpc	r1, r20
 43a:	05 06       	cpc	r0, r21
 43c:	08 95       	ret

0000043e <__fp_round>:
 43e:	09 2e       	mov	r0, r25
 440:	03 94       	inc	r0
 442:	00 0c       	add	r0, r0
 444:	11 f4       	brne	.+4      	; 0x44a <__fp_round+0xc>
 446:	88 23       	and	r24, r24
 448:	52 f0       	brmi	.+20     	; 0x45e <__fp_round+0x20>
 44a:	bb 0f       	add	r27, r27
 44c:	40 f4       	brcc	.+16     	; 0x45e <__fp_round+0x20>
 44e:	bf 2b       	or	r27, r31
 450:	11 f4       	brne	.+4      	; 0x456 <__fp_round+0x18>
 452:	60 ff       	sbrs	r22, 0
 454:	04 c0       	rjmp	.+8      	; 0x45e <__fp_round+0x20>
 456:	6f 5f       	subi	r22, 0xFF	; 255
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__fp_split3>:
 460:	57 fd       	sbrc	r21, 7
 462:	90 58       	subi	r25, 0x80	; 128
 464:	44 0f       	add	r20, r20
 466:	55 1f       	adc	r21, r21
 468:	59 f0       	breq	.+22     	; 0x480 <__fp_splitA+0x10>
 46a:	5f 3f       	cpi	r21, 0xFF	; 255
 46c:	71 f0       	breq	.+28     	; 0x48a <__fp_splitA+0x1a>
 46e:	47 95       	ror	r20

00000470 <__fp_splitA>:
 470:	88 0f       	add	r24, r24
 472:	97 fb       	bst	r25, 7
 474:	99 1f       	adc	r25, r25
 476:	61 f0       	breq	.+24     	; 0x490 <__fp_splitA+0x20>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	79 f0       	breq	.+30     	; 0x49a <__fp_splitA+0x2a>
 47c:	87 95       	ror	r24
 47e:	08 95       	ret
 480:	12 16       	cp	r1, r18
 482:	13 06       	cpc	r1, r19
 484:	14 06       	cpc	r1, r20
 486:	55 1f       	adc	r21, r21
 488:	f2 cf       	rjmp	.-28     	; 0x46e <__fp_split3+0xe>
 48a:	46 95       	lsr	r20
 48c:	f1 df       	rcall	.-30     	; 0x470 <__fp_splitA>
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__fp_splitA+0x30>
 490:	16 16       	cp	r1, r22
 492:	17 06       	cpc	r1, r23
 494:	18 06       	cpc	r1, r24
 496:	99 1f       	adc	r25, r25
 498:	f1 cf       	rjmp	.-30     	; 0x47c <__fp_splitA+0xc>
 49a:	86 95       	lsr	r24
 49c:	71 05       	cpc	r23, r1
 49e:	61 05       	cpc	r22, r1
 4a0:	08 94       	sec
 4a2:	08 95       	ret

000004a4 <__fp_zero>:
 4a4:	e8 94       	clt

000004a6 <__fp_szero>:
 4a6:	bb 27       	eor	r27, r27
 4a8:	66 27       	eor	r22, r22
 4aa:	77 27       	eor	r23, r23
 4ac:	cb 01       	movw	r24, r22
 4ae:	97 f9       	bld	r25, 7
 4b0:	08 95       	ret

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
